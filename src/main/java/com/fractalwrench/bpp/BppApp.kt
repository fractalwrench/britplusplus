package com.fractalwrench.bpp

import org.apache.commons.cli.ParseException

import java.io.File
import java.io.FileOutputStream
import java.net.URL

internal class BppApp {

    private val stringFileReader = StringFileReader()
    private val generator = ByteCodeGenerator()
    private val executor = BppExecutor()
    private val cmdLineParser = CmdLineParser()
    private val byteArrayClassLoader = ByteArrayClassLoader()

    @Throws(Exception::class)
    fun run(args: Array<String>) {
        var cmdLineOptions: CmdLineOptions? = null

        try {
            cmdLineOptions = cmdLineParser.parseBppOption(args)
        } catch (e: ParseException) {
            println(e.message)
            System.exit(-1)
        }

        Logger.setEnabled(cmdLineOptions!!.isVerbose)

        val sourceCode = stringFileReader.readFileContents(cmdLineOptions.input)
        val className = cmdLineOptions.outputClassName
        val byteCode = generator.generate(sourceCode, className)

        val outputFile = cmdLineOptions.output
        writeByteCodeToFile(byteCode, outputFile)

        val shellScript = File(outputFile.parent, className + ".sh")
        writeProgramShellScript(shellScript, className)

        val clz = byteArrayClassLoader.loadClassFromFile(outputFile, className)
        executor.execute(clz, args)
    }

    private fun writeByteCodeToFile(byteCode: ByteArray, file: File) {
        try {
            FileOutputStream(file).use { fos ->
                fos.write(byteCode)
                fos.flush()
            }
        } catch (e: Exception) {
            throw RuntimeException("Failed to write generated bytecode", e)
        }

    }

    private fun writeProgramShellScript(file: File, className: String) {
        val resource = javaClass.classLoader.getResource("packager.sh")
        val template = File(resource!!.file)
        val contents = stringFileReader.readFileContents(template)
        val script = contents.replace("CLASS_NAME".toRegex(), className)

        try {
            FileOutputStream(file).use { fos ->
                fos.write(script.toByteArray())
                fos.flush()
            }
        } catch (e: Exception) {
            throw RuntimeException("Failed to write shell script", e)
        }

        file.setExecutable(true)
    }
}
