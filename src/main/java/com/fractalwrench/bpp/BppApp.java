package com.fractalwrench.bpp;

import org.apache.commons.cli.ParseException;

import java.io.File;
import java.io.FileOutputStream;
import java.net.URL;

class BppApp {

    private final StringFileReader stringFileReader = new StringFileReader();
    private final ByteCodeGenerator generator = new ByteCodeGenerator();
    private final BppExecutor executor = new BppExecutor();
    private final CmdLineParser cmdLineParser = new CmdLineParser();
    private final ByteArrayClassLoader byteArrayClassLoader = new ByteArrayClassLoader();

    void run(String[] args) throws Exception {
        CmdLineOptions cmdLineOptions = null;

        try {
            cmdLineOptions = cmdLineParser.parseBppOption(args);
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            System.exit(-1);
        }

        Logger.setEnabled(cmdLineOptions.isVerbose());

        String sourceCode = stringFileReader.readFileContents(cmdLineOptions.getInput());
        String className = cmdLineOptions.getOutputClassName();
        byte[] byteCode = generator.generate(sourceCode, className);

        File outputFile = cmdLineOptions.getOutput();
        writeByteCodeToFile(byteCode, outputFile);

        File shellScript = new File(outputFile.getParent(), className + ".sh");
        writeProgramShellScript(shellScript, className);

        Class<?> clz = byteArrayClassLoader.loadClassFromFile(outputFile, className);
        executor.execute(clz, args);
    }

    private void writeByteCodeToFile(byte[] byteCode, File file) {
        try (FileOutputStream fos = new FileOutputStream(file)) {
            fos.write(byteCode);
            fos.flush();
        } catch (Exception e) {
            throw new RuntimeException("Failed to write generated bytecode", e);
        }
    }

    private void writeProgramShellScript(File file, String className) {
        URL resource = getClass().getClassLoader().getResource("packager.sh");
        File template = new File(resource.getFile());
        String contents = stringFileReader.readFileContents(template);
        String script = contents.replaceAll("CLASS_NAME", className);

        try (FileOutputStream fos = new FileOutputStream(file)) {
            fos.write(script.getBytes());
            fos.flush();
        } catch (Exception e) {
            throw new RuntimeException("Failed to write shell script", e);
        }
        file.setExecutable(true);
    }
}
