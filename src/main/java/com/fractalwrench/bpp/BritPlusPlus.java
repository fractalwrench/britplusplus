package com.fractalwrench.bpp;

import com.fractalwrench.bpp.args.CmdLineOptions;
import com.fractalwrench.bpp.args.CmdLineParser;
import com.fractalwrench.bpp.ast.ByteCodeGenerator;
import com.fractalwrench.bpp.common.Logger;
import com.fractalwrench.bpp.common.StringFileReader;
import com.fractalwrench.bpp.executor.BppExecutor;
import com.fractalwrench.bpp.loader.FileClassLoader;

import java.io.File;
import java.io.FileOutputStream;

/**
 * Compiles BritPlusPlus source code to Java ByteCode.
 */
public class BritPlusPlus {

    public static void main(String[] args) throws Exception {
        StringFileReader stringFileReader = new StringFileReader();
        CmdLineOptions cmdLineOptions = new CmdLineParser().parseBppOption(args);
        Logger.setEnabled(cmdLineOptions.isVerbose());

        String sourceCode = stringFileReader.readFileContents(cmdLineOptions.getInput());
        ByteCodeGenerator generator = new ByteCodeGenerator();
        File output = cmdLineOptions.getOutput();
        byte[] byteCode = generator.generate(sourceCode, output.getName());

        writeByteCodeToFile(byteCode, output);
        String className = output.getName();
        FileClassLoader fileClassLoader = new FileClassLoader();
        Class<?> clz = fileClassLoader.loadClassFromFile(new File("."), "Hello"); // FIXME
        BppExecutor executor = new BppExecutor();
        executor.execute(clz);
//        DynamicClassExecutor dynamicExecutor = new DynamicClassExecutor(new File("."), className, new BppExecutor());
//        dynamicExecutor.execute();
    }

    private static void writeByteCodeToFile(byte[] byteCode, File file) {
        try (FileOutputStream fos = new FileOutputStream(file)) {
            fos.write(byteCode);
            fos.flush();
        } catch (Exception e) {
            throw new RuntimeException("Failed to write generated bytecode", e);
        }
    }

}
