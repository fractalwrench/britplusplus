package com.fractalwrench.britplusplus;

import java.io.File;
import java.io.FileOutputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;

/**
 * Compiles BritPlusPlus source code to Java ByteCode.
 */
public class BritPlusPlus {

    public static final String OUTPUT_FILENAME = "Hello.class";

    public static void main(String[] args) {
        String fileName = "test";// parseSourceFileName(args);
        String sourceCode = "test";// fetchSourceCode(fileName);

        BppGenerator generator = new BppGenerator();
        generator.generate(sourceCode);

        try (FileOutputStream fos = new FileOutputStream(OUTPUT_FILENAME)) {
            writeBytecodeToFile(fos);
        } catch (Exception e) {
            throw new RuntimeException("Failed to write generated bytecode", e);
        }

        try {
            File file = new File(".");
            URL url = file.toURI().toURL();
            URLClassLoader classLoader = new URLClassLoader(new URL[]{url});
            Class<?> hello = classLoader.loadClass("Hello");

            Method[] methods = hello.getMethods();
            Method main = hello.getMethod("main", String[].class);
            main.invoke(new Object(), (Object) new String[]{});
            main.toString();

        } catch (MalformedURLException | ClassNotFoundException | NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
            e.printStackTrace();
        }
    }

    private static void writeBytecodeToFile(FileOutputStream fos) throws Exception {
        byte[] dump = HelloDump.dump();
        fos.write(dump);
        fos.flush();
    }

    static String parseSourceFileName(String[] args) {
        if (args.length != 1) {
            String msg = String.format("Expected 1 argument, received %d. \n\nCorrect Usage: bpp <file>", args.length);
            throw new IllegalArgumentException(msg);
        }
        String filename = args[0];

        if (filename == null) {
            throw new IllegalArgumentException("Source file argument cannot be null!");
        }
        return filename;
    }

    static String fetchSourceCode(String fileName) {
        if (fileName == null) {
            throw new IllegalArgumentException("Cannot read filename 'null'!");
        }
        File file = new File(fileName);

        if (!file.exists()) {
            throw new RuntimeException(String.format("Unable to find file '%s'", fileName));
        }
        if (!file.canRead()) {
            throw new RuntimeException(String.format("Unable to read file '%s'", fileName));
        }
        return new StringFileReader().readFileContents(file);
    }

}
