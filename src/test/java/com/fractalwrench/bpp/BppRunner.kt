package com.fractalwrench.bpp

import java.io.ByteArrayOutputStream
import java.io.File
import java.io.PrintStream

/**
 * This class is primarily intended for executing BPP programs and verifying that StdOut matches
 * the expected String value. This is achieved through the following steps:
 *
 *
 *
 *  1. Read a BPP source file from the samples directory.
 *  1. Parse the BPP source and generate Java bytecode.
 *  1. Load the generated bytecode onto the classloader.
 *  1. Redirect the System.out PrintStream to a ByteArrayOutputStream.
 *  1. Execute the BPP program.
 *  1. Generate a string from the StdOut output.
 *
 *
 *
 * The main application follows a similar flow, albeit with a few more steps.
 */
class BppRunner(private val byteArrayClassLoader: ByteArrayClassLoader, private val byteCodeGenerator: ByteCodeGenerator, private val stringFileReader: StringFileReader, private val executor: BppExecutor) {

    @Throws(Exception::class)
    fun run(filename: String, className: String, args: Array<String>): String {
        val file = File(filename)
        val fileContents = stringFileReader.readFileContents(file)
        val byteCode = byteCodeGenerator.generate(fileContents, className)
        val clz = byteArrayClassLoader.loadClassFromByteCode(byteCode, className)

        val os = ByteArrayOutputStream()
        System.setOut(PrintStream(os))
        executor.execute(clz, args)
        return String(os.toByteArray())
    }

}
