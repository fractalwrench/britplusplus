package com.fractalwrench.bpp;

import com.fractalwrench.bpp.ast.ByteCodeGenerator;
import com.fractalwrench.bpp.common.StringFileReader;
import com.fractalwrench.bpp.executor.BppExecutor;
import com.fractalwrench.bpp.loader.ByteArrayClassLoader;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;

/**
 * Executes the BPP compiler and runs the generated bytecode, and returns it output as a String
 * by redirecting Standard Out to a PrintStream.
 */
public class BppRunner {

    private final ByteArrayClassLoader byteArrayClassLoader;
    private final ByteCodeGenerator byteCodeGenerator;
    private final StringFileReader stringFileReader;
    private final BppExecutor executor;

    public BppRunner(ByteArrayClassLoader byteArrayClassLoader, ByteCodeGenerator byteCodeGenerator, StringFileReader stringFileReader, BppExecutor executor) {
        this.byteArrayClassLoader = byteArrayClassLoader;
        this.byteCodeGenerator = byteCodeGenerator;
        this.stringFileReader = stringFileReader;
        this.executor = executor;
    }

    public String run(String filename, String className) throws Exception {
        File file = new File(filename);
        String fileContents = stringFileReader.readFileContents(file);
        byte[] byteCode = byteCodeGenerator.generate(fileContents, className);
        Class<?> clz = byteArrayClassLoader.loadClassFromByteCode(byteCode, className);

        ByteArrayOutputStream os = new ByteArrayOutputStream();
        System.setOut(new PrintStream(os));
        executor.execute(clz);
        return new String(os.toByteArray());
    }

}
