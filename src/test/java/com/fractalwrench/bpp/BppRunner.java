package com.fractalwrench.bpp;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;

/**
 * This class is primarily intended for executing BPP programs and verifying that StdOut matches
 * the expected String value. This is achieved through the following steps:
 * <p>
 * <ol>
 * <li>Read a BPP source file from the samples directory.</li>
 * <li>Parse the BPP source and generate Java bytecode.</li>
 * <li>Load the generated bytecode onto the classloader.</li>
 * <li>Redirect the System.out PrintStream to a ByteArrayOutputStream.</li>
 * <li>Execute the BPP program.</li>
 * <li>Generate a string from the StdOut output.</li>
 * </ol>
 * <p>
 * The main application follows a similar flow, albeit with a few more steps.
 */
public class BppRunner {

    private final ByteArrayClassLoader byteArrayClassLoader;
    private final ByteCodeGenerator byteCodeGenerator;
    private final StringFileReader stringFileReader;
    private final BppExecutor executor;

    public BppRunner(ByteArrayClassLoader byteArrayClassLoader, ByteCodeGenerator byteCodeGenerator, StringFileReader stringFileReader, BppExecutor executor) {
        this.byteArrayClassLoader = byteArrayClassLoader;
        this.byteCodeGenerator = byteCodeGenerator;
        this.stringFileReader = stringFileReader;
        this.executor = executor;
    }

    public String run(String filename, String className, String[] args) throws Exception {
        File file = new File(filename);
        String fileContents = stringFileReader.readFileContents(file);
        byte[] byteCode = byteCodeGenerator.generate(fileContents, className);
        Class<?> clz = byteArrayClassLoader.loadClassFromByteCode(byteCode, className);

        ByteArrayOutputStream os = new ByteArrayOutputStream();
        System.setOut(new PrintStream(os));
        executor.execute(clz, args);
        return new String(os.toByteArray());
    }

}
